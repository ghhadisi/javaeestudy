<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.hss.mybatis.mapper.UserMapper">

    <!-- 声明sql片段 -->
    <sql id="userFields">
        	id, username, birthday, sex, address
    </sql>


    <!-- id:statement的id 或者叫做sql的id-->
    <!-- parameterType:声明输入参数的类型 -->
    <!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
    <!-- #{}：输入参数的占位符，相当于jdbc的？ -->
    <select id="queryUserById" parameterType="int" resultType="com.hss.mybatis.bean.User">
        select * from user where id = #{id}
    </select>

    <!-- 如果返回多个结果，mybatis会自动把返回的结果放在list容器中 -->
    <!-- resultType的配置和返回一个结果的配置一样 -->
    <select id="queryUserByName" parameterType="string" resultType="com.hss.mybatis.bean.User">
        select * from user where username like #{username}
    </select>

    <select id="queryUserByName2" parameterType="string" resultType="com.hss.mybatis.bean.User">
        select * from user where username like '%${value}%'
    </select>

    <insert id="saveUser" parameterType="com.hss.mybatis.bean.User">
        insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>


    <!---->
    <insert id="saveUser2" parameterType="com.hss.mybatis.bean.User">
        <!-- selectKey 标签实现主键返回 -->
        <!-- keyColumn:主键对应的表中的哪一列 -->
        <!-- keyProperty：主键对应的pojo中的哪一个属性 -->
        <!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql -->
        <!-- resultType：设置返回的id的类型 -->
        <selectKey keyColumn="id"  keyProperty="id"  order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>


<!--5.7.5.Mysql使用 uuid实现主键-->
    <insert id="saveUser3" parameterType="com.hss.mybatis.bean.User">
        <!-- selectKey 标签实现主键返回 -->
        <!-- keyColumn:主键对应的表中的哪一列 -->
        <!-- keyProperty：主键对应的pojo中的哪一个属性 -->
        <!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql -->
        <!-- resultType：设置返回的id的类型 -->
        <selectKey keyColumn="id"  keyProperty="id"  order="BEFORE" resultType="string">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address})
    </insert>


    <!--修改用户名-->
    <update id="updateUserById" parameterType="com.hss.mybatis.bean.User">
        update user set username = #{username} where id = #{id}

    </update>

<!--5.9.删除用户-->
    <delete id="deleteUserById" parameterType="int">
        delete from user  where id = #{id}
    </delete>
    <!--
    5.6.1.#{}和${}
#{}表示一个占位符号，通过#{}可以实现preparedStatement向占位符中设置值，
自动进行java类型和jdbc类型转换。#{}可以有效防止sql注入。 #{}可以接收简单类型值或pojo属性值。
 如果parameterType传输单个简单类型值，#{}括号中可以是value或其它名称。

${}表示拼接sql串，通过${}可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换，
 ${}可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，${}括号中只能是value。

    5.6.2.parameterType和resultType
parameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。
resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。如果有多条数据，则分别进行映射，并把对象放到容器List中

5.6.3.selectOne和selectList
selectOne查询一条记录，如果使用selectOne查询多条记录则抛出异常：
org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 3
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:70)
selectList可以查询一条或多条记录。
    -->


    <select id="queryUserByQueryVo" parameterType="com.hss.mybatis.bean.QueryVo" resultType="com.hss.mybatis.bean.User">
      select * from user  where username like '%${user.username}%'
    </select>


    <select id="queryUserCount"  resultType="int">
      select count(*) from user
    </select>
    <!-- 根据条件查询用户 -->
<!--    <select id="queryUserByWhere" parameterType="user" resultType="user">
		SELECT id, username, birthday, sex, address FROM `user`
	WHERE sex = #{sex} AND username LIKE
	'%${username}%'
	</select>-->
    <!--3.1.5.使用if标签-->
  <!--  <select id="queryUserByWhere" parameterType="user" resultType="user">
		SELECT id, username, birthday, sex, address FROM `user`
	WHERE 1=1
	    <if test='sex != null and sex != ""'>
            AND sex = #{sex}
        </if>

        <if test='username != null and username != ""'>
            AND username LIKE '%${username}%'
        </if>
	</select>-->
    <!--3.2.Where标签-->
    <!--如果要使用别的Mapper.xml配置的sql片段，可以在refid前面加上对应的Mapper.xml的namespace-->
    <select id="queryUserByWhere" parameterType="user" resultType="user">
        SELECT <include refid="userFields" /> FROM `user`
        <where>
        <if test='sex != null and sex != ""'>
            AND sex = #{sex}
        </if>

        <if test='username != null and username != ""'>
            AND username LIKE '%${username}%'
        </if>
        </where>
    </select>

    <!-- 根据ids查询用户 -->
    <!--foreach-->
    <select id="queryUserByIds" parameterType="queryVo" resultType="user">
    SELECT * FROM `user`
      <where>
          <!-- foreach标签，进行遍历 -->
          <!-- collection：遍历的集合，这里是QueryVo的ids属性 -->
          <!-- item：遍历的项目，可以随便写，，但是和后面的#{}里面要一致 -->
          <!-- open：在前面添加的sql片段 -->
          <!-- close：在结尾处添加的sql片段 -->
          <!-- separator：指定遍历的元素之间使用的分隔符 -->
          <foreach collection="ids" item="item" open="id IN (" close=")" separator=",">
              #{item}
          </foreach>
      </where>
    </select>

    <select id="queryOrderUser" resultType="orderUser">
        select o.id, o.user_id userId, o.number, o.createtime, o.note, u.username, u.address from orders o left join user u on  o.user_id = u.id
    </select>



<!--4.3.一对多查询-->
    <resultMap type="user2" id="userOrderResultMap">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="birthday" column="birthday" />
        <result property="sex" column="sex" />
        <result property="address" column="address" />

        <!-- 配置一对多的关系 -->
        <collection property="orders" javaType="list" ofType="order">
            <!-- 配置主键，是关联Order的唯一标识 -->
            <id property="id" column="oid" />
            <result property="number" column="number" />
            <result property="createtime" column="createtime" />
            <result property="note" column="note" />
        </collection>
    </resultMap>
    <!-- 一对多关联，查询订单同时查询该用户下的订单 -->
    <select id="queryUserOrder2" resultMap="userOrderResultMap">
    SELECT u.id,
	u.username,
	u.birthday,
	u.sex,
	u.address,
	o.id oid,
	o.number,
	o.createtime,
	o.note
	FROM
	`user` u
	LEFT JOIN `orders` o ON u.id = o.user_id
    </select>
</mapper>